-- Standard awesome library
require("awful")
require("awful.autofocus")
require("awful.rules")
-- Theme handling library
require("beautiful")
-- Notification library
require("naughty")
-- Vicious widget library
require("vicious")
-- require("eminent")

-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

-- Handle runtime errors after startup
do
    local in_error = false
    awesome.add_signal("debug::error", function (err)
        -- Make sure we don't go into an endless error loop
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = err })
        in_error = false
    end)
end
-- }}}

-- {{{ Variable definitions
-- Themes define colours, icons, and wallpapers
beautiful.init("/home/suh/.config/awesome/zenburn.lua")

-- This is used later as the default terminal and editor to run.
terminal = "xfce4-terminal"
editor = os.getenv("EDITOR") or "editor"
editor_cmd = terminal .. " -x " .. editor

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod1" -- changed to Alt/Option key

local exec   = awful.util.spawn
local sexec  = awful.util.spawn_with_shell

-- Table of layouts to cover with awful.layout.inc, order matters.
layouts =
{
    awful.layout.suit.floating,
    awful.layout.suit.tile,
    awful.layout.suit.tile.left,
    awful.layout.suit.tile.bottom,
    awful.layout.suit.tile.top,
    awful.layout.suit.fair,
    awful.layout.suit.fair.horizontal,
    -- awful.layout.suit.spiral,
    -- awful.layout.suit.spiral.dwindle,
    awful.layout.suit.max,
    -- awful.layout.suit.max.fullscreen,
    -- awful.layout.suit.magnifier
}
-- }}}

-- {{{ Tags
-- Define a tag table which hold all screen tags.
tags = 
{
    names = { "web", "term", "mail", "media", "free" },
    layout = { layouts[8], layouts[6], layouts[2], layouts[1], layouts[1] }
}
for s = 1, screen.count() do
    -- Each screen has its own tag table.
    tags[s] = awful.tag(tags.names, s, tags.layout)
    -- set IM client to smaller width on right of "mail" tag
    awful.tag.setproperty(tags[s][3], "mwfact", 0.74)
end
-- }}}

-- {{{ Tag wallpapers
-- for s = 1, screen.count() do
--     for t = 1, 5 do
--  tags[s][t]:add_signal("property::selected", function (tag)
--      if not tag.selected then return end
--      wallpaper_cmd = "awsetbg /home/suh/Pictures/wallpapers/tags/wallpaper" .. t .. ".jpg"
--      awful.util.spawn(wallpaper_cmd)
--  end)
--     end
-- end
-- }}}

-- {{{ Menu
-- Create a laucher widget and a main menu
myawesomemenu = {
   { "manual", terminal .. " -x man awesome" },
   -- { "edit config", editor_cmd .. " " .. awesome.conffile },
   -- { "edit config", "xfce4-terminal -x vi /home/suh/.config/awesome/rc.lua" },
   { "edit config", "xfce4-terminal -x gvim /home/suh/.config/awesome/rc.lua" },
   { "restart", awesome.restart },
   { "quit", awesome.quit }
}


internet = {
    { "Firefox", "firefox"},
    { "Google Chrome", "google-chrome" },
    { "Liferea", "liferea" },
    { "Pidgin", "pidgin" },
    { "Transmission", "transmission-gtk" },
}

media = {
    { "Rhythmbox", "rhythmbox" },
    { "gPodder", "gpodder" },
    { "VLC", "vlc" },
}
    
utilities = {
    { "Gedit", "gedit" },
    { "GVim", "gvim" },
    { "Leafpad", "leafpad" },
    { "Terminal", "xfce4-terminal" },
    { "Thunar", "thunar" },
    { "Synaptic", "gksu synaptic" },
}

accessories = {
    { "Cheese", "cheese"},
    { "Nitrogen", "nitrogen"},
    { "Screenshot", "xfce4-screenshooter"},
}

settings = {
    { "Theme settings", "lxappearance" },
    -- { "XFCE settings", "xfce4-settings-manager" }, -- settings used by xfce4-settingsd
    { "Graphics settings", "nvidia-settings"}, -- Nvidia driver settings
    { "Printer settings", "system-config-printer"},
}

session = {
            { "Lock screen", 'i3lock -i zenburn-background.png -p default -n' }, 
            { "Suspend", 'dbus-send --system --print-reply --dest="org.freedesktop.UPower" /org/freedesktop/UPower org.freedesktop.UPower.Suspend' },
            { "Logout", awesome.quit },
            { "Reboot", 'dbus-send --system --print-reply --dest="org.freedesktop.ConsoleKit" /org/freedesktop/ConsoleKit/Manager org.freedesktop.ConsoleKit.Manager.Restart' },
            { "Shutdown",'dbus-send --system --print-reply --dest="org.freedesktop.ConsoleKit" /org/freedesktop/ConsoleKit/Manager org.freedesktop.ConsoleKit.Manager.Stop' },
    }

mymainmenu = awful.menu({ items = { { "Internet", internet }, 
            { "Multimedia", media },
            { "Utilities", utilities },
            { "Accessories", accessories },
            { "Settings", settings },
            { "Awesome", myawesomemenu },
                                    -- { "Debian", debian.menu.Debian_menu.Debian },
            { "Session", session },
          }
                        })

mylauncher = awful.widget.launcher({ image = image(beautiful.awesome_icon),
                                     menu = mymainmenu })
-- }}}

-- {{{ Wibox
-- Create a textclock widget
mytextclock = awful.widget.textclock({ align = "right" }, " %a %b %d, %I:%M %p ", 60)

-- Create a systray
mysystray = widget({ type = "systray" })


-- {{{ Reusable separator
separator = widget({ type = "imagebox" })
separator.image = image(beautiful.widget_sep)
-- }}}

-- {{{ Spacer
spacer = widget({ type = "textbox" })
  spacer.text = "  "
  -- spacer.width = 4
-- }}}

-- Create Vicious wiboxes

-- {{{ Battery state
baticon = widget({ type = "imagebox" })
baticon.image = image(beautiful.widget_bat)
-- Initialize widget
batwidget = widget({ type = "textbox" })
-- Register widget
vicious.register(batwidget, vicious.widgets.bat, "$1$2%", 61, "BAT0")
-- }}}

-- {{{ Network usage
dnicon = widget({ type = "imagebox" })
upicon = widget({ type = "imagebox" })
dnicon.image = image(beautiful.widget_net)
upicon.image = image(beautiful.widget_netup)
-- Initialize widget
netwidget = widget({ type = "textbox" })
-- Register widget
vicious.register(netwidget, vicious.widgets.net, '<span color="'
  .. beautiful.fg_netdn_widget ..'">${eth0 down_kb}</span> <span color="'
  .. beautiful.fg_netup_widget ..'">${eth0 up_kb}</span>', 3)
-- }}}

-- {{{ Volume level
volicon = widget({ type = "imagebox" })
volicon.image = image(beautiful.widget_vol)
-- Initialize widgets
--volbar    = awful.widget.progressbar()
volwidget = widget({ type = "textbox" })
-- Enable caching
vicious.cache(vicious.widgets.volume)
-- Register widgets
--vicious.register(volbar,    vicious.widgets.volume,  "$1",  2, "Master")
vicious.register(volwidget, vicious.widgets.volume, " $1%", 2, "Master")

mailicon = widget({ type = "imagebox" })
mailicon.image = image(beautiful.widget_mail)
-- mailicon.bg_align = "middle"
-- mailicon.width = 8

mailinfo = widget ({ type = "textbox" })
mail_t = awful.tooltip({ objects = { mailinfo },})
vicious.register(mailinfo, vicious.widgets.gmail,
    function (widget, args)
  if args["{count}"] == 0 then
            mailicon.image = image(beautiful.widget_mail)
      return 0
  else
      -- mail_t:set_text(args["{subject}"])
      -- mail_t:add_to_object(mailicon)
      mailicon.image = image(beautiful.widget_newmail)
      return args["{count}"]
  end
    end, 35)
-- }}}

-- Create a wibox for each screen and add it
mywibox = {}
mybottombar = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag)
        -- above line must end in , if adding lines below
                    -- awful.button({ }, 4, awful.tag.viewnext),
                    -- awful.button({ }, 5, awful.tag.viewprev)
                    )
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  if not c:isvisible() then
                                                      awful.tag.viewonly(c:tags()[1])
                                                  end
                                                  -- This will also un-minimize
                                                  -- the client, if needed
                                                  client.focus = c
                                                  c:raise()
                                              end
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))

for s = 1, screen.count() do
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(function(c)
                                              return awful.widget.tasklist.label.currenttags(c, s)
                -- use next two lines instead of the line above, to hide icons in tasklist
                -- local text, bg, status_image, icon =  awful.widget.tasklist.label.currenttags(c, s)
                -- return text, bg, status_image, nil
                                          end, mytasklist.buttons)

    -- Create the wibox
    mywibox[s] = awful.wibox({
      fg = beautiful.fg_normal, bg = beautiful.bg_normal,
      border_color = beautiful.border_focus,
      --border_width = beautiful.border_width,
      position = "top",
      --height = 20,
      screen = s
      })
    -- Add widgets to the wibox - order matters
    mywibox[s].widgets = {
        {
            mylauncher,
            mytaglist[s], spacer,
      mylayoutbox[s],
            layout = awful.widget.layout.horizontal.leftright
        },
        mytextclock, separator,
  volwidget, --volbar.widget,
  volicon, separator,
  -- batwidget, baticon, separator,
  mailinfo, mailicon, separator,
        s == 1 and mysystray or nil,
        separator, upicon, netwidget, dnicon,
  mytasklist[s],
        layout = awful.widget.layout.horizontal.rightleft
    }
   --  -- Create wibox for bottom tasklist
   --  mybottombar[s] = awful.wibox({
   --          fg = beautiful.fg_normal, bg = beautiful.bg_normal,
   --          border_color = beautiful.border_focus,
   --          --border_width = beautiful.border_width,
   --          position = "bottom",
   --          -- height = 20,
   --          screen = s
   --          })
   --  -- Add widgets to the wibox - order matters
   --  mybottombar[s].widgets = {
   --      mytasklist[s],
   --      layout = awful.widget.layout.horizontal.leftright
   --  }
end
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end)
    -- above line must end in , if adding lines below
    -- awful.button({ }, 4, awful.tag.viewnext),
    -- awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
    awful.key({ modkey,           }, "Left",   awful.tag.viewprev       ),
    awful.key({ modkey,           }, "Right",  awful.tag.viewnext       ),
    awful.key({ modkey,           }, "Escape", awful.tag.history.restore),

    awful.key({ modkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "w", function () mymainmenu:show({keygrabber=true}) end),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
    -- awful.key({ modkey, "Control" }, "r", awesome.restart),
    -- awful.key({ modkey, "Shift"   }, "q", awesome.quit),

    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
    awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),

    awful.key({ modkey, "Control" }, "n", awful.client.restore),
    -- my own program launch shortcuts
    awful.key({ modkey,        }, "'", function () awful.util.spawn("google-chrome") end),
    awful.key({ modkey,        }, ";", function () awful.util.spawn("thunar") end),
    -- awful.key({ modkey,        }, "c", function () awful.util.spawn("google-chrome") end),
    -- awful.key({ modkey,        }, "u", function () awful.util.spawn("uzbl-tabbed") end),
    -- workaround for xfce4-volumed/pulseaudio incompatibility - see also /etc/asound.conf
    awful.key({ }, "XF86AudioMute", function () awful.util.spawn("amixer set Master toggle") end),
    -- Other volume keys, so that I can avoid using xfce4-volumed
    awful.key({ }, "XF86AudioRaiseVolume", function () awful.util.spawn_with_shell("amixer set Master 5%+ unmute && aplay /home/suh/bin/volume.wav") end),
    awful.key({ }, "XF86AudioLowerVolume", function () awful.util.spawn_with_shell("amixer set Master 5%- && aplay /home/suh/bin/volume.wav") end),
    -- Map media keys to Rhythmbox
    awful.key({ }, "XF86AudioPlay", function () awful.util.spawn("rhythmbox-client --play-pause") end),
    awful.key({ }, "XF86AudioPrev", function () awful.util.spawn("rhythmbox-client --previous") end),
    awful.key({ }, "XF86AudioNext", function () awful.util.spawn("rhythmbox-client --next") end)
    
    -- Prompt
    -- awful.key({ modkey }, "r", function () awful.util.spawn("xfrun4") end)
    -- last item here MUST not end with ,
)

clientkeys = awful.util.table.join(
    awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
    awful.key({ modkey, "Shift"   }, "r",      function (c) c:redraw()                       end),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end),
    awful.key({ modkey,           }, "n",
        function (c)
            -- The client currently has the input focus, so it cannot be
            -- minimized, since minimized clients can't have the focus.
            c.minimized = true
        end),
    awful.key({ modkey,           }, "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c.maximized_vertical   = not c.maximized_vertical
        end)
)

-- Compute the maximum number of digit we need, limited to 9
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(9, math.max(#tags[s], keynumber));
end

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, keynumber do
    globalkeys = awful.util.table.join(globalkeys,
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = mouse.screen
                        if tags[screen][i] then
                            awful.tag.viewonly(tags[screen][i])
                        end
                  end),
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = mouse.screen
                      if tags[screen][i] then
                          awful.tag.viewtoggle(tags[screen][i])
                      end
                  end),
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.movetotag(tags[client.focus.screen][i])
                      end
                  end),
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.toggletag(tags[client.focus.screen][i])
                      end
                  end))
end

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
         size_hints_honor = false,
                     focus = true,
                     keys = clientkeys,
                     buttons = clientbuttons },
      callback = awful.client.setslave,
      maximized_vertical = false,
      maximized_horizontal = false,
    },
    { rule = { class = "Transmission-gtk" },
      properties = { floating = true } },
    { rule = { class = "Vlc" },
      properties = { floating = true } },
    { rule = { class = "Gimp" },
      properties = { floating = true } },
    { rule = { class = "Pidgin" },
      properties = { tag = tags[1][3] } },
    { rule = { class = "Rhythmbox" },
      properties = { tag = tags[1][4] } },
    -- { rule = { class = "Xfrun4" },
    --   properties = {floating = true}, 
    --   callback = function( c )
    --          c:geometry( { width = 400 , height = 90 } )
    --      end
    -- },
    { rule = { class = "Guake.py" },
      properties = { floating = true },
    },
    { rule = { class = "Tasque" },
      properties = {floating = true },
    },
    { rule = { class = "Firefox" },
      properties = { floating = true },
    },
    { rule = { class = "Firefox" , instance = "Navigator" },
      properties = { floating = false }
    },
    { rule = { class = "Thunar", name = "File Operation Progress" },
      properties = { floating = true },
    },
    -- Fullscreen flash-player plugin  
    -- for Firefox
    { rule = { instance = "plugin-container" },
      properties = { floating = true },
      callback = awful.titlebar.add  },
    -- for Chrome
    { rule = { class = "Exe", instance = "exe" },
      properties = { floating = true },
      callback = awful.titlebar.add  },
    },
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.add_signal("manage", function (c, startup)
    -- Add a titlebar
    -- awful.titlebar.add(c, { modkey = modkey })

    -- Enable sloppy focus
    c:add_signal("mouse::enter", function(c)
        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
            client.focus = c
        end
    end)

    if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
         -- awful.client.setslave(c)

        -- Put windows in a smart way, only if they does not set an initial position.
        if not c.size_hints.user_position and not c.size_hints.program_position then
            awful.placement.no_overlap(c)
            awful.placement.no_offscreen(c)
        end
    end
end)

client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}

-- {{{  Autostart
-- awful.util.spawn_with_shell("nvidia-settings -l")
awful.util.spawn_with_shell("/usr/bin/setxkbmap -option caps:swapescape -option altwin:ctrl_win")
-- xfce4 settings daemon not needed; use lxappearance and set DPI in xorg.conf
-- awful.util.spawn_with_shell("xfsettingsd")
awful.util.spawn_with_shell("xcalib /home/suh/colorprofile-mac.icc")
awful.util.spawn_with_shell("pgrep -u $USER -x nm-applet > /dev/null || (nm-applet &)")
awful.util.spawn_with_shell("sleep 2 && tasque --quiet &")
awful.util.spawn_with_shell("sleep 3 && xfce4-power-manager &")
-- awful.util.spawn("xcompmgr")
-- awful.util.spawn_with_shell("pgrep -u $USER -x conky > /dev/null || (sleep 2 && conky &)")
awful.util.spawn_with_shell("run-once.sh /usr/share/system-config-printer/applet.py")
awful.util.spawn_with_shell("run-once.sh gnome-do")
awful.util.spawn_with_shell("thunar --daemon")
awful.util.spawn_with_shell("guake && guake --show-hide &")
-- awful.util.spawn_with_shell("xscreensaver -no-splash &")
-- }}}

-- disable startup-notification globally
local oldspawn = awful.util.spawn
awful.util.spawn = function (s)
  oldspawn(s, false)
end

-- vi: ft=lua
