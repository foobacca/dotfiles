#!/usr/bin/env python
# vi: set ft=python
"""
This script will set up all the files in the correct places.

Using --force will remove any previous files
"""

import os
import sys
import getopt
import subprocess

force = False


class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg


class Setup:
    def __init__(self, verbose=False):
        self.verbose = verbose

    def get_dotfiles_dir(self):
        return os.path.abspath(os.path.dirname(__file__))

    def create_link(self, link_name, source_name, is_dir=False):
        if self.verbose:
            print "about to link %s to %s" % (link_name, source_name)
        if not ((not is_dir and (os.path.isfile(link_name) or os.path.islink(link_name))) or
                (is_dir and os.path.isdir(link_name))):
            if self.verbose:
                print "No file found so just created link"
            os.symlink(source_name, link_name)
        else:
            if not os.path.islink(link_name):
                if self.verbose:
                    print "File found so move it and create link"
                os.rename(link_name, link_name + '.orig')
                os.symlink(source_name, link_name)
            elif os.readlink(link_name) != source_name:
                if self.verbose:
                    print "Bad link found so remove it and recreate link"
                os.remove(link_name)
                os.symlink(source_name, link_name)
            else:
                if self.verbose:
                    print "Link already present - nothing to do"

    def call_wrapper(self, args, **kwargs):
        if self.verbose:
            if 'cwd' in kwargs:
                print "About to execute '%s'" % ' '.join(args)
            else:
                print "About to execute '%s' in %s" % \
                        (' '.join(args), kwargs['cwd'])
        subprocess.call(args, **kwargs)

    def setup_dotlink(self, filename, is_dir=False, dotfilename=None):
        if dotfilename == None:
            dotfilename = '.' + filename
        link_name = os.path.join(os.environ["HOME"], dotfilename)
        source_name = os.path.join(self.get_dotfiles_dir(), filename)
        self.create_link(link_name, source_name, is_dir=is_dir)

    def setup_binlink(self, binname, target_path):
        local_bin_dir = os.path.join(os.environ["HOME"], 'bin')
        if not os.path.isdir(local_bin_dir):
            if self.verbose:
                print "Creating local bin directory"
            os.mkdir(local_bin_dir)
        link_name = os.path.join(local_bin_dir, binname)
        self.create_link(link_name, target_path, is_dir=False)

    def setup_ack_link(self):
        source_name = os.path.join("/", 'usr', 'bin', 'ack-grep')
        self.setup_binlink('ack', source_name)

    def setup_git_submodules(self):
        dotfiles_dir = self.get_dotfiles_dir()
        self.call_wrapper(['git', 'submodule', 'sync'], cwd=dotfiles_dir)
        self.call_wrapper(['git', 'submodule', 'update', '--init'],
                cwd=dotfiles_dir)

    def setup_terminator_config(self):
        terminator_dir = os.path.join(os.environ["HOME"],
                '.config', 'terminator')
        if os.path.isdir(terminator_dir):
            link_name = os.path.join(terminator_dir, 'config')
            source_name = os.path.join(self.get_dotfiles_dir(),
                    'terminator.config')
            self.create_link(link_name, source_name)

    def setup_git_wtf(self):
        git_wtf_dir = os.path.join(self.get_dotfiles_dir(), 'git', 'git-wtf')
        git_wtf_bin = os.path.join(git_wtf_dir, 'git-wtf')
        self.setup_binlink('git-wtf', git_wtf_bin)
        self.call_wrapper(['make'], cwd=git_wtf_dir)

    def setup_git_tools(self):
        git_dir = os.path.join(self.get_dotfiles_dir(), 'git')
        for git_tool in os.listdir(git_dir):
            git_tool_path = os.path.join(git_dir, git_tool)
            if os.access(git_tool_path, os.X_OK) and not os.path.isdir(git_tool_path):
                self.setup_binlink(git_tool, git_tool_path)
        # git wtf is a special case, do it last
        self.setup_git_wtf()


def main(argv=None):
    verbose = False
    if argv is None:
        argv = sys.argv
    try:
        try:
            opts, args = getopt.getopt(argv[1:], "fhv", ["force", "help",
                    "verbose"])
        except getopt.error, msg:
            raise Usage(msg)
        # more code, unchanged
        for o, a in opts:
            if o in ["-v", "--verbose"]:
                verbose = True

        setup = Setup(verbose)
        setup.setup_git_submodules()
        # set up the rc file links
        for file in ["ackrc", "bashrc", "gvimrc", "inputrc", "tmux.conf",]:
            setup.setup_dotlink(file)
        setup.setup_dotlink("vimrc.vundle", dotfilename='.vimrc')
        setup.setup_terminator_config()
        setup.setup_ack_link()
        setup.setup_git_tools()
    except Usage, err:
        print >>sys.stderr, err.msg
        print >>sys.stderr, "for help use --help"
        return 2

if __name__ == "__main__":
    sys.exit(main())
