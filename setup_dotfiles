#!/usr/bin/env python
# vi: set ft=python
"""
This script will set up all the files in the correct places.

Using --force will remove any previous files
"""

import os
import sys
import getopt
import subprocess

force = False


class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg


def get_dotfiles_dir():
    return os.path.abspath(os.path.dirname(__file__))


def create_link(link_name, source_name, is_dir=False, verbose=False):
    if verbose:
        print "about to link %s to %s" % (link_name, source_name)
    if not ((not is_dir and os.path.isfile(link_name)) or
            (is_dir and os.path.isdir(link_name))):
        if verbose:
            print "No file found so just created link"
        os.symlink(source_name, link_name)
    else:
        if not os.path.islink(link_name):
            if verbose:
                print "File found so move it and create link"
            os.rename(link_name, link_name + '.orig')
            os.symlink(source_name, link_name)
        elif os.readlink(link_name) != source_name:
            if verbose:
                print "Bad link found so remove it and recreate link"
            os.remove(link_name)
            os.symlink(source_name, link_name)
        else:
            if verbose:
                print "Link already present - nothing to do"


def setup_dotlink(filename, is_dir=False, verbose=False):
    link_name = os.path.join(os.environ["HOME"], '.' + filename)
    source_name = os.path.join(get_dotfiles_dir(), filename)
    create_link(link_name, source_name, is_dir=is_dir, verbose=verbose)


def setup_ack_link(verbose=False):
    local_bin_dir = os.path.join(os.environ["HOME"], 'bin')
    if not os.path.isdir(local_bin_dir):
        if verbose:
            print "Creating local bin directory"
        os.mkdir(local_bin_dir)
    link_name = os.path.join(local_bin_dir, 'ack')
    source_name = os.path.join("/", 'usr', 'bin', 'ack-grep')
    create_link(link_name, source_name, verbose=verbose)


def setup_git_submodules(verbose=False):
    dotfiles_dir = get_dotfiles_dir()
    subprocess.call(['git', 'submodule', 'sync'], cwd=dotfiles_dir)
    subprocess.call(['git', 'submodule', 'update', '--init'], cwd=dotfiles_dir)


def setup_terminator_config(verbose=False):
    link_name = os.path.join(os.environ["HOME"], '.config', 'terminator', 'config')
    source_name = os.path.join(get_dotfiles_dir(), 'terminator.config')
    create_link(link_name, source_name, verbose=verbose)


def setup_janus(verbose=False):
    # run the bootstrap script
    # curl https://raw.github.com/carlhuda/janus/master/bootstrap.sh -o - | sh
    pass


def main(argv=None):
    verbose = False
    if argv is None:
        argv = sys.argv
    try:
        try:
            opts, args = getopt.getopt(argv[1:], "fhv", ["force", "help",
                    "verbose"])
        except getopt.error, msg:
            raise Usage(msg)
        # more code, unchanged
        for o, a in opts:
            if o in ["-v", "--verbose"]:
                verbose = True
        # set up the rc file links
        for file in ["ackrc", "bashrc", "gvimrc.after", "inputrc",
                    "tmux.conf", "vimrc.after", "vimrc.before"]:
            setup_dotlink(file, verbose=verbose)
        setup_dotlink("janus", is_dir=True, verbose=verbose)
        setup_terminator_config(verbose)
        setup_ack_link(verbose)
        setup_git_submodules(verbose)
        setup_janus(verbose)
    except Usage, err:
        print >>sys.stderr, err.msg
        print >>sys.stderr, "for help use --help"
        return 2

if __name__ == "__main__":
    sys.exit(main())
